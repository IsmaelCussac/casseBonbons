package com.example.jeupoo;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import android.app.Activity;
import android.content.Intent;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.MotionEvent;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Chronometer;
import android.widget.TextView;

public class PlayActivity extends Activity {

	GridPrinc grid;
	HashMap<Integer, Bitmap> icon = new HashMap<Integer, Bitmap>();
	int[] dim = new int[2];
	Point point = new Point();
	HashMap<String, String> config;
	String nomFichier;

	protected void onCreate(Bundle savedInstanceState) {
		
		 super.onCreate(savedInstanceState);
	        
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.play);
		
		config = new HashMap<String, String>();
		String line;
		AssetManager assetManager = getAssets();
		nomFichier = "lvl1.txt"; 
		try {		
			BufferedReader buff = new BufferedReader(new InputStreamReader(assetManager.open(nomFichier)));
			while ((line = buff.readLine()) != null) {
				String[] result = line.split("::");
				if (result[0].length() > 0)
					config.put(result[0], result[1]);
			}
			buff.close(); 
		}
		catch (IOException e) {	System.err.println(e);}
		
        
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        
        MyView view = (MyView) findViewById(R.id.myView1);
        TextView score = (TextView) findViewById(R.id.score);
        TextView level = (TextView) findViewById(R.id.level);
        Chronometer chrono = (Chronometer) findViewById(R.id.chrono);
        
       
       
        DisplayMetrics metrics = new DisplayMetrics();
    	getWindowManager().getDefaultDisplay().getMetrics(metrics);
    	dim[0] = metrics.heightPixels;
    	dim[1] = metrics.widthPixels;
        
        Bitmap iconeBleu = BitmapFactory.decodeResource(this.getResources(), R.drawable.bleu);
        Bitmap iconeRouge = BitmapFactory.decodeResource(this.getResources(), R.drawable.rouge);
        Bitmap iconeVert = BitmapFactory.decodeResource(this.getResources(), R.drawable.vert);
        Bitmap iconeJaune = BitmapFactory.decodeResource(this.getResources(), R.drawable.jaune);
        Bitmap iconeOrange = BitmapFactory.decodeResource(this.getResources(), R.drawable.orange);
        Bitmap iconeViolet = BitmapFactory.decodeResource(this.getResources(), R.drawable.violet);
        Bitmap iconeChoco = BitmapFactory.decodeResource(this.getResources(), R.drawable.choco);
        Bitmap iconeVide = BitmapFactory.decodeResource(this.getResources(), R.drawable.vide);

        icon.put(0, iconeBleu);
		icon.put(1, iconeRouge);
		icon.put(2, iconeVert);
		icon.put(3, iconeJaune);
		icon.put(4, iconeOrange);
		icon.put(5, iconeViolet);
		icon.put(6, iconeChoco);
		icon.put(7, iconeVide);

		
        grid = new GridPrinc(icon,9,9,4);
        
        grid.generationGrille(dim, Integer.parseInt(config.get("col")));
        //Automate.init(grid);
          
        
        GObjet [] grille = grid.trans();
        GraphicWorld world = new GraphicWorld(grid,new BackGround(), grille, score, chrono);
        
       
        //System.out.println(points.compterPoints());
        String txt = "";
        score.setText(txt);
        level.setText(config.get("lvl"));
        
	        
        
        getWindow().setBackgroundDrawableResource(R.drawable.fondfinal);
        nomFichier = config.get("suiv");
        
        view.setOnDraw(world, null);
	}
	
	
	protected void onStop(Bundle savedInstanceState) {
		super.onStop(savedInstanceState);
		int points = grid.point.getPoints();
	    if(points > 20){
	    	Intent intent = new Intent(PlayActivity.this, EndPlayActivity.class);
			startActivity(intent);
	    }
	
    }
	
	
	float xClic[] = new float[2];
	float yClic[] = new float[2];
	
	public boolean onTouchEvent(MotionEvent event){   
		
		switch (event.getAction()){
		
			case MotionEvent.ACTION_DOWN :
				if(event.getX() > 9*0.105*dim[1] || event.getX() < 0 || event.getY() > 0.1*dim[0]+9*0.11*dim[1] || event.getY() < 0.1*dim[0])
					return true ;	
				
				xClic[0] = event.getX();
				yClic[0] = event.getY();
				//Toast.makeText(getBaseContext(),"xD = " + (int)(xClic[0] / (float)(0.105*dim[1])) + "," + "  yD = " +(int)((yClic[0] - 0.1*dim[0]) / (float)(0.11*dim[1])) ,Toast.LENGTH_SHORT).show();	
				break;
				
			case MotionEvent.ACTION_MOVE :
				if(event.getX() > 9*0.105*dim[1] || event.getX() < 0 || event.getY() > 0.1*dim[0]+9*0.11*dim[1] || event.getY() < 0.1*dim[0])
					return true ;	
		
				xClic[1] = event.getX();
				yClic[1] = event.getY();
				grid.clique(xClic, yClic, dim);
				break;
			
			/*case MotionEvent.ACTION_UP :
				if(event.getX() > 9*0.105*dim[1] || event.getX() < 0 || event.getY() > 0.1*dim[0]+9*0.11*dim[1] || event.getY() < 0.1*dim[0])
					return true ;	
		
				xClic[1] = event.getX();
				yClic[1] = event.getY();
				//Toast.makeText(getBaseContext(),"xD = " + (int)(xClic[1] / (float)(0.105*dim[1])) + "," + "  yD = " +(int)((yClic[1] - 0.1*dim[0]) / (float)(0.11*dim[1])) ,Toast.LENGTH_SHORT).show();
				break;*/
						
		}                            
		return true;	
	}
	
//	public boolean onKeyDown (int keyCode, KeyEvent event){
//		
//		if(keyCode == KeyEvent.KEYCODE_BACK){
//			
//		}
//		
//	}
}