package com.jeupoo.main;

public class Automate {

	static int [][] gridIndice;
	static int nbrH = 0;
	static int nbrV = 0;
	
	public static int[][] parcours(GridPrinc grid){
		
		nbrV = grid.getNbrV();
		nbrH = grid.getNbrH();
		gridIndice = new int [nbrV][nbrH];
		
		initGridIndice(grid);
		ligne(grid);
		return grid.gridDup;
	}
	
	public static void   initGridIndice(GridPrinc grid){
		for(int i = 0; i<nbrV; i++)
			for(int j = 0; j<nbrH; j++)
				gridIndice[i][j] = grid.grille[i][j].mCase.getIndice();
	}

	public static void ligne(GridPrinc grid){
		int k=0;
		int comptVB, comptVH, comptHD, comptHG;
		
		for (int i=0; i<nbrV; i++)
			for (int j=0; j<nbrH; j++){
				comptVB=1;
				comptHD=1;
				comptVH=1;
				comptHG=1;
				k=i-1;
				while(k>=0 && !grid.isChoco(gridIndice[i][j]) && Verification.type(gridIndice[k][j], gridIndice[i][j]))
				{
					comptVH++;
					k--;
				}
				k=i+1;
				while(k<nbrV && !grid.isChoco(gridIndice[i][j]) && Verification.type(gridIndice[k][j], gridIndice[i][j]))
				{
					comptVB++;
					k++;
				}
				k=j-1;
				while(k>=0 && !grid.isChoco(gridIndice[i][j]) && Verification.type(gridIndice[i][k], gridIndice[i][j]))
				{
					comptHG++;
					k--;
				}
				k=j+1;
				while(k<nbrH && !grid.isChoco(gridIndice[i][j]) && Verification.type(gridIndice[i][k], gridIndice[i][j]))
				{
					comptHD++;
					k++;
				}
				
				int H = comptHD+comptHG-1;
				int V = comptVB+comptVH-1;
				
				if(comptHD>=3 && comptHG >=3){
					grid.gridDup[i][j]=40;
				}
				else if(comptVB>=3 && comptVH >= 3 ){
					grid.gridDup[i][j]=40;
				}
				else if (H>=3 && V>=3){
					if (gridIndice[i][j]<10)
						grid.gridDup[i][j]=gridIndice[i][j]+30;
				}
				else if ((comptHD == 4 && comptHG !=2) || (comptVB == 4 && comptVH!=2) ){
					grid.gridDup[i][j]=gridIndice[i][j]+10;
				}
				else if(H>=3 || V>=3){
					grid.grille[i][j].mCase.bombe(grid, grid.gridDup, i, j);
					grid.gridDup[i][j]=gridIndice[i][j];
				}
				
				if((H>=3 || V>=3) && (grid.isEmballe(gridIndice[i][j]) || grid.isRaye(gridIndice[i][j]))){
					grid.grille[i][j].mCase.bombe(grid, grid.gridDup, i, j);
					
				}	 
			}
	}
}